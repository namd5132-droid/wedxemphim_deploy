

import { useState, useEffect } from "react";
import apiClient from "../../../constants/api"; // axios instance

type ActiveTab = "home" | "manage" | "tickets";
type ManageTab = "add" | "edit" | "delete" | "showtime";

interface Movie {
  id: number;
  title: string;
  genre: string;
  price: number;
  new: boolean;
  image: string;
  description: string;
}

interface MovieForm {
  title: string;
  genre: string;
  price: number;
  new: boolean;
  image: string | File;
  description: string;
}

interface Order { id: number; customer_name: string; customer_email: string; total: number; status: string; created_at: string; }

export default function AdminDashboard() {
  const [activeTab, setActiveTab] = useState<ActiveTab>("home");
  const [manageTab, setManageTab] = useState<ManageTab>("add");
  const [movies, setMovies] = useState<Movie[]>([]);
  const [orders, setOrders] = useState<Order[]>([]);
  // Th√™m ·ªü ƒë·∫ßu component
  const [editingShowtime, setEditingShowtime] = useState<Showtime | null>(null);


  const [formData, setFormData] = useState<MovieForm>({
    title: "",
    genre: "",
    price: 75000,
    new: false,
    image: "",
    description: "",
  });

  const [editForm, setEditForm] = useState<MovieForm & { id: number | "" }>({
    id: "",
    title: "",
    genre: "",
    price: 75000,
    new: false,
    image: "",
    description: "",
  });

  interface Showtime {
    id: number;
    movie_id: number;
    time: string; // l∆∞u datetime ISO
    room?: string;
    movie_title?: string;
  }

  const [showtimes, setShowtimes] = useState<Showtime[]>([]);
  const [showtimeForm, setShowtimeForm] = useState({
    room: "",
    time: "",
  });

  interface Showtime {
    id: number;
    time: string;
    room?: string;
  }

  const fetchShowtimes = async () => {
    try {
      const res = await apiClient.get("/showtimes");
      setShowtimes(res.data);
    } catch (err) {
      console.error("L·ªói load su·∫•t chi·∫øu:", err);
    }
  };

  const [deleteId, setDeleteId] = useState<string>("");

  useEffect(() => {
    fetchMovies();
    fetchOrders();
    fetchShowtimes();
  }, []);

  const fetchMovies = async () => {
    try {
      const res = await apiClient.get("/movies");
      setMovies(res.data);
    } catch (err) {
      console.error("L·ªói load phim:", err);
    }
  };

  const fetchOrders = async () => {
    try {
      const res = await apiClient.get("/orders"); // API tr·∫£ v·ªÅ danh s√°ch v√©
      setOrders(res.data);
    } catch (err) {
      console.error("L·ªói load v√©:", err);
    }
  };

  // ================== ADD / EDIT / DELETE MOVIE ==================
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const target = e.target as HTMLInputElement;
    const name = target.name;
    let value: string | number | boolean | File;

    if (target.type === "checkbox") value = target.checked;
    else if (target.type === "number") value = Number(target.value);
    else if (target.type === "file") value = target.files?.[0] || "";
    else value = target.value;

    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddMovie = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const formDataToSend = new FormData();
      formDataToSend.append("title", formData.title);
      formDataToSend.append("genre", formData.genre);
      formDataToSend.append("price", String(formData.price));
      formDataToSend.append("new", formData.new ? "1" : "0");
      formDataToSend.append("description", formData.description);
      if (formData.image instanceof File) formDataToSend.append("image", formData.image);

      await apiClient.post("/movies", formDataToSend, { headers: { "Content-Type": "multipart/form-data" } });
      alert("‚úÖ Th√™m phim th√†nh c√¥ng");
      fetchMovies();
    } catch {
      alert("‚ùå L·ªói khi th√™m phim!");
    }
  };

  const handleEditChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const target = e.target as HTMLInputElement;
    const name = target.name;
    let value: string | number | boolean | File;

    if (target.type === "checkbox") value = target.checked;
    else if (target.type === "number") value = Number(target.value);
    else if (target.type === "file") value = target.files?.[0] || "";
    else value = target.value;

    setEditForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleUpdateMovie = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editForm.id) {
      alert("Vui l√≤ng nh·∫≠p/ch·ªçn ID phim c·∫ßn s·ª≠a!");
      return;
    }
    try {
      const formDataToSend = new FormData();
      formDataToSend.append("title", editForm.title);
      formDataToSend.append("genre", editForm.genre);
      formDataToSend.append("price", String(editForm.price));
      formDataToSend.append("new", editForm.new ? "1" : "0");
      formDataToSend.append("description", editForm.description);
      if (editForm.image instanceof File) formDataToSend.append("image", editForm.image);

      await apiClient.post(`/movies/${editForm.id}?_method=PUT`, formDataToSend, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      alert("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng");
      fetchMovies();
    } catch {
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t phim!");
    }
  };

  const handleDeleteMovie = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!deleteId) {
      alert("Vui l√≤ng nh·∫≠p ID phim c·∫ßn x√≥a!");
      return;
    }
    try {
      await apiClient.delete(`/movies/${deleteId}`);
      alert("üóëÔ∏è X√≥a phim th√†nh c√¥ng");
      setDeleteId("");
      fetchMovies();
    } catch {
      alert("‚ùå L·ªói khi x√≥a phim!");
    }
  };

  const handleSelectMovie = (movie: Movie) => {
    setManageTab("edit");
    setEditForm({
      id: movie.id,
      title: movie.title,
      genre: movie.genre,
      price: movie.price,
      new: movie.new,
      image: movie.image,
      description: movie.description,
    });
  };

  return (
    <div className="min-h-screen flex flex-col bg-black text-white">
      {/* Navbar */}
      <nav className="fixed top-0 left-0 w-full z-50 bg-gradient-to-r from-red-700 via-purple-800 to-black p-4 flex justify-between items-center shadow-lg backdrop-blur-md bg-opacity-90">
        <h1 className="text-3xl font-extrabold tracking-wide text-red-500">
          üé¨ CGV Admin
        </h1>
        <ul className="flex gap-6 font-medium text-lg">
          {["home", "manage", "tickets"].map((tab) => (
            <li
              key={tab}
              onClick={() => setActiveTab(tab as ActiveTab)}
              className={`cursor-pointer px-4 py-2 rounded-full transition ${activeTab === tab
                ? "bg-red-500 text-white font-bold"
                : "hover:bg-red-700"
                }`}
            >
              {tab === "home"
                ? "Trang ch·ªß"
                : tab === "manage"
                  ? "Qu·∫£n l√Ω"
                  : "Danh s√°ch kh√°ch h√†ng"}
            </li>
          ))}
        </ul>
      </nav>

      {/* Content */}
      <div className="flex-1 p-6">
        {/* Trang ch·ªß */}
        {activeTab === "home" && (
          <div className="space-y-10">
            <h2 className="text-4xl font-extrabold text-center text-red-500 tracking-wide">
              üé¨ B·∫£ng ƒëi·ªÅu khi·ªÉn CGV Admin
            </h2>

            {/* KPI Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="bg-gradient-to-br from-red-600 to-red-800 p-6 rounded-2xl shadow-xl hover:scale-105 transition">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-white">S·ªë l∆∞·ª£ng phim</h3>
                  <span className="text-3xl">üé•</span>
                </div>
                <p className="mt-4 text-5xl font-extrabold text-white">{movies.length}</p>
              </div>

              <div className="bg-gradient-to-br from-yellow-500 to-yellow-700 p-6 rounded-2xl shadow-xl hover:scale-105 transition">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-black">V√© ƒë√£ ƒë·∫∑t</h3>
                  <span className="text-3xl">üéüÔ∏è</span>
                </div>
                <p className="mt-4 text-5xl font-extrabold text-black">{orders.length}</p>
              </div>

              <div className="bg-gradient-to-br from-green-500 to-green-700 p-6 rounded-2xl shadow-xl hover:scale-105 transition">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-white">Doanh thu</h3>
                  <span className="text-3xl">üí∞</span>
                </div>
                <p className="mt-4 text-4xl font-extrabold text-white">
                  {new Intl.NumberFormat("vi-VN").format(
                    orders.reduce((sum, o) => sum + Number(o.total || 0), 0)
                  )}ƒë
                </p>
              </div>
            </div>

            {/* Box Th√¥ng b√°o */}
            <div className="bg-gray-900/80 p-8 rounded-2xl shadow-lg max-w-4xl mx-auto backdrop-blur-md">
              <h3 className="text-2xl font-bold text-purple-400 mb-6">
                ‚ö° Th√¥ng tin nhanh
              </h3>
              <ul className="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-300">
                <li className="flex items-center gap-3">
                  <span className="text-red-400 text-xl">‚ûï</span>
                  Th√™m, s·ª≠a, x√≥a phim trong m·ª•c <b>Qu·∫£n l√Ω</b>
                </li>
                <li className="flex items-center gap-3">
                  <span className="text-yellow-400 text-xl">üìë</span>
                  Xem danh s√°ch v√© chi ti·∫øt trong m·ª•c <b>Danh s√°ch v√©</b>
                </li>
                <li className="flex items-center gap-3">
                  <span className="text-green-400 text-xl">üìà</span>
                  Doanh thu ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c
                </li>
                <li className="flex items-center gap-3">
                  <span className="text-blue-400 text-xl">üí°</span>
                  Trang ch·ªß hi·ªÉn th·ªã s·ªë li·ªáu t·ªïng quan nhanh ch√≥ng
                </li>
              </ul>
            </div>
          </div>
        )}

        {/* Qu·∫£n l√Ω phim */}
        {activeTab === "manage" && (
          <div>
            <h2 className="text-3xl font-bold text-center text-red-500 mb-8">üé• Qu·∫£n l√Ω phim</h2>

            {/* Submenu */}
            <div className="flex justify-center gap-6 mb-8">
              <button
                onClick={() => setManageTab("add")}
                className={`px-6 py-2 rounded-full font-semibold ${manageTab === "add" ? "bg-green-600 text-white" : "bg-gray-700 hover:bg-green-500"
                  }`}
              >
                ‚ûï Th√™m
              </button>
              <button
                onClick={() => setManageTab("edit")}
                className={`px-6 py-2 rounded-full font-semibold ${manageTab === "edit" ? "bg-yellow-500 text-black" : "bg-gray-700 hover:bg-yellow-400"
                  }`}
              >
                ‚úèÔ∏è S·ª≠a
              </button>
              <button
                onClick={() => setManageTab("delete")}
                className={`px-6 py-2 rounded-full font-semibold ${manageTab === "delete" ? "bg-red-600 text-white" : "bg-gray-700 hover:bg-red-500"
                  }`}
              >
                üóëÔ∏è X√≥a
              </button>

              <button
                onClick={() => setManageTab("showtime")}
                className={`px-6 py-2 rounded-full font-semibold ${manageTab === "showtime" ? "bg-blue-600 text-white" : "bg-gray-700 hover:bg-blue-500"
                  }`}
              >
                üïí Su·∫•t chi·∫øu
              </button>


            </div>



            {/* Layout */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Danh s√°ch phim */}
              <div className="bg-gray-900 p-6 rounded-xl shadow-lg max-h-[650px] overflow-y-auto">
                <h3 className="text-2xl font-bold text-red-400 mb-4">üìã Danh s√°ch phim</h3>
                {movies.length === 0 ? (
                  <p className="text-gray-400">Ch∆∞a c√≥ phim n√†o</p>
                ) : (
                  <div className="grid gap-4">
                    {movies.map((movie) => (
                      <div
                        key={movie.id}
                        onClick={() => handleSelectMovie(movie)}
                        className="flex items-center gap-4 bg-gray-800 rounded-lg p-3 cursor-pointer hover:bg-gray-700 transition"
                      >
                        <span className="w-10 text-center text-red-500 font-bold">{movie.id}</span>
                        <img src={movie.image} alt={movie.title} className="w-16 h-20 object-cover rounded-lg" />
                        <div>
                          <p className="font-bold">{movie.title}</p>
                          <p className="text-sm text-gray-400">
                            {movie.genre} ‚Ä¢ {movie.price.toLocaleString()}ƒë
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Form */}
              <div>
                {manageTab === "add" && (
                  <form onSubmit={handleAddMovie} className="bg-gray-900 p-6 rounded-xl shadow-lg space-y-4">
                    <h3 className="text-2xl font-bold text-green-400 mb-4">‚ûï Th√™m phim m·ªõi</h3>
                    <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="text" name="title" value={formData.title} onChange={handleChange} placeholder="T√™n phim" />
                    {/* Th·ªÉ lo·∫°i - dropdown */}
                    <select className="w-full p-3 rounded-lg bg-gray-800 text-white"
                      name="genre"
                      value={formData.genre}
                      onChange={handleChange}
                    >
                      <option value="">-- Ch·ªçn th·ªÉ lo·∫°i --</option>
                      <option value="H√†nh ƒê·ªông">H√†nh ƒê·ªông</option>
                      <option value="T√¨nh C·∫£m">T√¨nh C·∫£m</option>
                      <option value="Kinh D·ªã">Kinh D·ªã</option>
                      <option value="Gia ƒê√¨nh">Gia ƒê√¨nh</option>
                      <option value="H·ªçc ƒê∆∞·ªùng">H·ªçc ƒê∆∞·ªùng</option>
                      <option value="H√†i H∆∞·ªõc">H√†i H∆∞·ªõc</option>
                      <option value="Phi√™u L∆∞u">Phi√™u L∆∞u</option>
                      <option value="Khoa H·ªçc Vi·ªÖn T∆∞·ªüng">Khoa H·ªçc Vi·ªÖn T∆∞·ªüng</option>
                      <option value="Ho·∫°t H√¨nh">Ho·∫°t H√¨nh</option>
                      <option value="T√¢m L√Ω">T√¢m L√Ω</option>
                      <option value="C·ªï Trang">C·ªï Trang</option>
                    </select>
                    <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="number" name="price" value={formData.price} onChange={handleChange} placeholder="Gi√° v√©" />
                    <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="file" name="image" onChange={handleChange} accept="image/*" />
                    <textarea className="w-full p-3 rounded-lg bg-gray-800 text-white" name="description" value={formData.description} onChange={handleChange} placeholder="M√¥ t·∫£ phim" />
                    <label className="flex items-center gap-2">
                      <input type="checkbox" name="new" checked={formData.new} onChange={handleChange} />
                      <span>Phim s·∫Øp chi·∫øu</span>
                    </label>
                    <button className="w-full bg-green-600 py-2 rounded-lg hover:bg-green-700">L∆∞u phim</button>
                  </form>
                )}

                {manageTab === "edit" && (
                  <form onSubmit={handleUpdateMovie} className="bg-gray-900 p-6 rounded-xl shadow-lg space-y-4">
                    <h3 className="text-2xl font-bold text-yellow-400 mb-4">‚úèÔ∏è S·ª≠a phim</h3>
                    <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="number" name="id" value={editForm.id} readOnly />
                    <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="text" name="title" value={editForm.title} onChange={handleEditChange} placeholder="T√™n phim m·ªõi" />
                    {/* Th·ªÉ lo·∫°i - dropdown */}
                    <select className="w-full p-3 rounded-lg bg-gray-800 text-white"
                      name="genre"
                      value={formData.genre}
                      onChange={handleChange}
                    >
                      <option value="">-- Ch·ªçn th·ªÉ lo·∫°i --</option>
                      <option value="H√†nh ƒê·ªông">H√†nh ƒê·ªông</option>
                      <option value="T√¨nh C·∫£m">T√¨nh C·∫£m</option>
                      <option value="Kinh D·ªã">Kinh D·ªã</option>
                      <option value="Gia ƒê√¨nh">Gia ƒê√¨nh</option>
                      <option value="H·ªçc ƒê∆∞·ªùng">H·ªçc ƒê∆∞·ªùng</option>
                      <option value="H√†i H∆∞·ªõc">H√†i H∆∞·ªõc</option>
                      <option value="Phi√™u L∆∞u">Phi√™u L∆∞u</option>
                      <option value="Khoa H·ªçc Vi·ªÖn T∆∞·ªüng">Khoa H·ªçc Vi·ªÖn T∆∞·ªüng</option>
                      <option value="Ho·∫°t H√¨nh">Ho·∫°t H√¨nh</option>
                      <option value="T√¢m L√Ω">T√¢m L√Ω</option>
                      <option value="C·ªï Trang">C·ªï Trang</option>
                    </select>                         <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="number" name="price" value={editForm.price} onChange={handleEditChange} placeholder="Gi√° v√© m·ªõi" />
                    <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="file" name="image" onChange={handleEditChange} accept="image/*" />
                    <textarea className="w-full p-3 rounded-lg bg-gray-800 text-white" name="description" value={editForm.description} onChange={handleEditChange} placeholder="M√¥ t·∫£ m·ªõi" />
                    <label className="flex items-center gap-2">
                      <input type="checkbox" name="new" checked={editForm.new} onChange={handleEditChange} />
                      <span>Phim s·∫Øp chi·∫øu</span>
                    </label>
                    <button className="w-full bg-yellow-500 text-black py-2 rounded-lg hover:bg-yellow-600">C·∫≠p nh·∫≠t</button>
                  </form>
                )}

                {manageTab === "delete" && (
                  <form onSubmit={handleDeleteMovie} className="bg-gray-900 p-6 rounded-xl shadow-lg space-y-4">
                    <h3 className="text-2xl font-bold text-red-400 mb-4">üóëÔ∏è X√≥a phim</h3>
                    <input className="w-full p-3 rounded-lg bg-gray-800 text-white" type="number" value={deleteId} onChange={(e) => setDeleteId(e.target.value)} placeholder="Nh·∫≠p ID phim c·∫ßn x√≥a" />
                    <button className="w-full bg-red-600 py-2 rounded-lg hover:bg-red-700">X√≥a phim</button>
                  </form>
                )}


                {manageTab === "showtime" && (
                  <div className="bg-gray-900 p-6 rounded-xl shadow-lg space-y-6">
                    <h3 className="text-2xl font-bold text-blue-400">üïí Qu·∫£n l√Ω su·∫•t chi·∫øu</h3>

                    {/* Form th√™m / s·ª≠a su·∫•t chi·∫øu */}
                    <form
                      onSubmit={async (e) => {
                        e.preventDefault();
                        try {
                          if (!showtimeForm.room || !showtimeForm.time) {
                            alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
                            return;
                          }

                          if (editingShowtime) {
                            // S·ª≠a su·∫•t chi·∫øu
                            await apiClient.put(`/showtimes/${editingShowtime.id}`, {
                              room: showtimeForm.room,
                              time: showtimeForm.time,
                            });
                            alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t su·∫•t chi·∫øu");
                            setEditingShowtime(null);
                          } else {
                            // Th√™m su·∫•t chi·∫øu
                            await apiClient.post("/showtimes", {
                              room: showtimeForm.room,
                              time: showtimeForm.time,
                            });
                            alert("‚úÖ ƒê√£ th√™m su·∫•t chi·∫øu m·ªõi");
                          }

                          setShowtimeForm({ room: "", time: "" });
                          fetchShowtimes();
                        } catch (err) {
                          console.error("L·ªói l∆∞u su·∫•t chi·∫øu:", err);
                          alert("‚ùå Kh√¥ng th·ªÉ l∆∞u su·∫•t chi·∫øu");
                        }
                      }}
                      className="space-y-4"
                    >
                      {/* Nh·∫≠p ph√≤ng */}
                      <input
                        type="text"
                        placeholder="üè† Nh·∫≠p t√™n ph√≤ng (VD: Ph√≤ng 1)"
                        value={showtimeForm.room}
                        onChange={(e) => setShowtimeForm((prev) => ({ ...prev, room: e.target.value }))}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white"
                      />

                      {/* Nh·∫≠p gi·ªù */}
                      <input
                        type="time"
                        value={showtimeForm.time}
                        onChange={(e) => setShowtimeForm((prev) => ({ ...prev, time: e.target.value }))}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white"
                      />

                      <button className="w-full bg-blue-600 py-2 rounded-lg hover:bg-blue-700">
                        {editingShowtime ? "üíæ L∆∞u thay ƒë·ªïi" : "‚ûï Th√™m su·∫•t chi·∫øu"}
                      </button>
                    </form>

                    {/* Danh s√°ch su·∫•t chi·∫øu */}
                    <div>
                      <h4 className="text-xl font-semibold text-blue-300 mt-6 mb-2">
                        üìã Danh s√°ch su·∫•t chi·∫øu
                      </h4>
                      {showtimes.length === 0 ? (
                        <p className="text-gray-400">Ch∆∞a c√≥ su·∫•t chi·∫øu</p>
                      ) : (
                        <div className="overflow-y-auto max-h-[400px] space-y-2">
                          {showtimes.map((s) => (
                            <div
                              key={s.id}
                              className="flex items-center justify-between bg-gray-800 p-3 rounded-lg"
                            >
                              <div>
                                <p className="text-gray-300">üè† Ph√≤ng: {s.room}</p>
                                <p className="text-gray-300">‚è∞ Gi·ªù chi·∫øu: {s.time.slice(0, 5)}</p>
                              </div>

                              <div className="flex gap-2">
                                {/* S·ª≠a */}
                                <button
                                  onClick={() => {
                                    setEditingShowtime(s);
                                    setShowtimeForm({ room: s.room || "", time: s.time || "" });
                                  }}
                                  className="bg-yellow-500 px-4 py-1 rounded-lg hover:bg-yellow-600"
                                >
                                  ‚úèÔ∏è S·ª≠a
                                </button>

                                {/* X√≥a */}
                                <button
                                  onClick={async () => {
                                    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a su·∫•t chi·∫øu n√†y?")) return;
                                    try {
                                      await apiClient.delete(`/showtimes/${s.id}`);
                                      fetchShowtimes();
                                    } catch (err) {
                                      console.error("L·ªói x√≥a su·∫•t chi·∫øu:", err);
                                      alert("‚ùå Kh√¥ng th·ªÉ x√≥a su·∫•t chi·∫øu");
                                    }
                                  }}
                                  className="bg-red-600 px-4 py-1 rounded-lg hover:bg-red-700"
                                >
                                  üóëÔ∏è X√≥a
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                )}





              </div>
            </div>
          </div>
        )}

        {/* Danh s√°ch v√© */}
        {activeTab === "tickets" && (
          <div>
            <h2 className="text-3xl font-bold text-center text-red-500 mb-8">
              üéüÔ∏è Danh s√°ch v√© ƒë√£ ƒë·∫∑t
            </h2>
            {orders.length === 0 ? (
              <p className="text-gray-400 text-center">Ch∆∞a c√≥ v√© n√†o</p>
            ) : (
              <div className="overflow-x-auto bg-gray-900 rounded-lg shadow-lg">
                <table className="w-full border-collapse">
                  <thead className="bg-gray-800 text-red-400">
                    <tr>
                      <th className="p-3 text-left">M√£ v√©</th>
                      <th className="p-3 text-left">Kh√°ch h√†ng</th>
                      <th className="p-3 text-left">Email</th>
                      <th className="p-3 text-left">T·ªïng ti·ªÅn</th>
                      <th className="p-3 text-left">Tr·∫°ng th√°i</th>
                      <th className="p-3 text-left">Ng√†y ƒë·∫∑t</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orders.map((order) => (
                      <tr
                        key={order.id}
                        className="border-t border-gray-700 hover:bg-gray-800"
                      >
                        <td className="p-3">{order.id}</td>
                        <td className="p-3">{order.customer_name}</td>
                        <td className="p-3">{order.customer_email}</td>
                        <td className="p-3 text-green-400">
                          {order.total.toLocaleString()}ƒë
                        </td>
                        <td className="p-3">{order.status}</td>
                        <td className="p-3">
                          {new Date(order.created_at).toLocaleString()}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        )}

      </div>
    </div>
  );
}

